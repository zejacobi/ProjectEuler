"""
# PROBLEM 29
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence
of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
"""


# I'm going to be a jerk and just make a big list, then use the list(set()) trick to make it unique
# I'm counting on this built-in logic being more heavily optimized that anything I could write.

# Hmmm, that said, there is a relatively simple way to avoid some repeats; the knowledge that
# e.g. 2^4 == 4^2, or 2^6 = 4^3. But this can't be a major source of speed, because there are only
# 10 perfect squares below 100 and this doesn't even remove all of their results. So I'm not going
# to bother with it. This is one of those trade-offs between computer time and human time that
# gave us languages like python in the first place.


results = []

for a in range(2, 101):
    for b in range(2, 101):
        results.append(a ** b)


print(len(list(set(results))))
